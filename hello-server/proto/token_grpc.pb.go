// 使用proto3语法

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc2
// source: token.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TokenHello_TokenHello_FullMethodName = "/TokenHello/TokenHello"
)

// TokenHelloClient is the client API for TokenHello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenHelloClient interface {
	TokenHello(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
}

type tokenHelloClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenHelloClient(cc grpc.ClientConnInterface) TokenHelloClient {
	return &tokenHelloClient{cc}
}

func (c *tokenHelloClient) TokenHello(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, TokenHello_TokenHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenHelloServer is the server API for TokenHello service.
// All implementations must embed UnimplementedTokenHelloServer
// for forward compatibility
type TokenHelloServer interface {
	TokenHello(context.Context, *TokenRequest) (*TokenResponse, error)
	mustEmbedUnimplementedTokenHelloServer()
}

// UnimplementedTokenHelloServer must be embedded to have forward compatible implementations.
type UnimplementedTokenHelloServer struct {
}

func (UnimplementedTokenHelloServer) TokenHello(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenHello not implemented")
}
func (UnimplementedTokenHelloServer) mustEmbedUnimplementedTokenHelloServer() {}

// UnsafeTokenHelloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenHelloServer will
// result in compilation errors.
type UnsafeTokenHelloServer interface {
	mustEmbedUnimplementedTokenHelloServer()
}

func RegisterTokenHelloServer(s grpc.ServiceRegistrar, srv TokenHelloServer) {
	s.RegisterService(&TokenHello_ServiceDesc, srv)
}

func _TokenHello_TokenHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenHelloServer).TokenHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenHello_TokenHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenHelloServer).TokenHello(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenHello_ServiceDesc is the grpc.ServiceDesc for TokenHello service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenHello_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TokenHello",
	HandlerType: (*TokenHelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TokenHello",
			Handler:    _TokenHello_TokenHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token.proto",
}

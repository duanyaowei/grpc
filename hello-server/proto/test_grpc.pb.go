// 使用proto3语法

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc2
// source: test.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DuanTest_DuanTest_FullMethodName = "/DuanTest/DuanTest"
)

// DuanTestClient is the client API for DuanTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DuanTestClient interface {
	DuanTest(ctx context.Context, in *DuanParams, opts ...grpc.CallOption) (*DuanResponse, error)
}

type duanTestClient struct {
	cc grpc.ClientConnInterface
}

func NewDuanTestClient(cc grpc.ClientConnInterface) DuanTestClient {
	return &duanTestClient{cc}
}

func (c *duanTestClient) DuanTest(ctx context.Context, in *DuanParams, opts ...grpc.CallOption) (*DuanResponse, error) {
	out := new(DuanResponse)
	err := c.cc.Invoke(ctx, DuanTest_DuanTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DuanTestServer is the server API for DuanTest service.
// All implementations must embed UnimplementedDuanTestServer
// for forward compatibility
type DuanTestServer interface {
	DuanTest(context.Context, *DuanParams) (*DuanResponse, error)
	mustEmbedUnimplementedDuanTestServer()
}

// UnimplementedDuanTestServer must be embedded to have forward compatible implementations.
type UnimplementedDuanTestServer struct {
}

func (UnimplementedDuanTestServer) DuanTest(context.Context, *DuanParams) (*DuanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuanTest not implemented")
}
func (UnimplementedDuanTestServer) mustEmbedUnimplementedDuanTestServer() {}

// UnsafeDuanTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DuanTestServer will
// result in compilation errors.
type UnsafeDuanTestServer interface {
	mustEmbedUnimplementedDuanTestServer()
}

func RegisterDuanTestServer(s grpc.ServiceRegistrar, srv DuanTestServer) {
	s.RegisterService(&DuanTest_ServiceDesc, srv)
}

func _DuanTest_DuanTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DuanParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DuanTestServer).DuanTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DuanTest_DuanTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DuanTestServer).DuanTest(ctx, req.(*DuanParams))
	}
	return interceptor(ctx, in, info, handler)
}

// DuanTest_ServiceDesc is the grpc.ServiceDesc for DuanTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DuanTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DuanTest",
	HandlerType: (*DuanTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DuanTest",
			Handler:    _DuanTest_DuanTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
